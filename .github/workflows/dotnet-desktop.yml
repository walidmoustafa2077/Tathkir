name: Build & Publish TathkīrWPF

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    defaults:
      run:
        shell: pwsh
        working-directory: "Tathkīr WPF"

    strategy:
      matrix:
        configuration: [Release]
        runtime: [win-x64]

    env:
      PROJECT_FILE: "Tathkīr WPF.csproj"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET SDK 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Pin SDK via global.json (8.x)
        run: |
          $versions = (& dotnet --list-sdks) | ForEach-Object { $_.Split()[0] } | Where-Object { $_ -like '8.*' } | Sort-Object -Descending
          if (-not $versions) { throw "No .NET 8 SDK found." }
          $ver = $versions[0]
          @"
          {
            "sdk": { "version": "$ver" }
          }
          "@ | Out-File -FilePath ../global.json -Encoding utf8

      - name: Restore
        run: dotnet restore "$env:PROJECT_FILE"

      - name: Build
        run: dotnet build "$env:PROJECT_FILE" --configuration "${{ matrix.configuration }}" --no-restore

      - name: Publish (self-contained)
        shell: pwsh
        run: |
          $out = Join-Path $env:GITHUB_WORKSPACE "publish\${{ matrix.runtime }}"
          New-Item -ItemType Directory -Force -Path $out | Out-Null
          dotnet publish "Tathkīr WPF.csproj" `
            --configuration "${{ matrix.configuration }}" `
            --runtime "${{ matrix.runtime }}" `
            --self-contained true `
            -p:PublishSingleFile=false `
            -o "$out"
          Write-Host "Published to $out"

      - name: Package release (zip)
        run: |
          $zipDir = Join-Path $env:GITHUB_WORKSPACE "artifacts"
          New-Item -ItemType Directory -Force -Path $zipDir | Out-Null
          $zipPath = Join-Path $zipDir "TathkirWPF-${{ matrix.configuration }}-${{ matrix.runtime }}.zip"
          if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
          $publishDir = Join-Path $env:GITHUB_WORKSPACE "publish\${{ matrix.runtime }}"
          Compress-Archive -Path (Join-Path $publishDir "*") -DestinationPath $zipPath
          Write-Host "Created $zipPath"

      - name: Upload artifact (zip only)
        uses: actions/upload-artifact@v4
        with:
          name: "TathkīrWPF-${{ matrix.configuration }}-${{ matrix.runtime }}"
          path: artifacts/*.zip
          if-no-files-found: error

      - name: Extract version from .csproj
        id: versioning
        shell: pwsh
        run: |
          $csproj = Join-Path $env:GITHUB_WORKSPACE "Tathkīr WPF\Tathkīr WPF.csproj"
          [xml]$xml = Get-Content $csproj
          $v = $xml.Project.PropertyGroup.ApplicationVersion | Select-Object -First 1
          if (-not $v) { $v = $xml.Project.PropertyGroup.Version | Select-Object -First 1 }
          if (-not $v) { throw "No <ApplicationVersion> or <Version> found in $csproj" }
          "version=$v" >> $env:GITHUB_OUTPUT

      - name: Recreate release (idempotent)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          TAG: v${{ steps.versioning.outputs.version }}
        run: |
          # Delete release if it exists
          gh release view "$env:TAG" --repo "$env:REPO" 1>$null 2>$null
          if ($LASTEXITCODE -eq 0) {
            gh release delete "$env:TAG" --repo "$env:REPO" -y
          } else {
            Write-Host "No existing release $env:TAG"
          }

          # Delete tag ref if it exists
          gh api "repos/$env:REPO/git/refs/tags/$($env:TAG)" 1>$null 2>$null
          if ($LASTEXITCODE -eq 0) {
            gh api -X DELETE "repos/$env:REPO/git/refs/tags/$($env:TAG)" 1>$null 2>$null
            Write-Host "Deleted tag $env:TAG"
          } else {
            Write-Host "No existing tag $env:TAG"
          }

          # Ensure step ends with success
          Write-Host "Recreate step completed"

      - name: Create release with single asset (zip)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          TAG: v${{ steps.versioning.outputs.version }}
        run: |
          $asset = Join-Path $env:GITHUB_WORKSPACE "artifacts\TathkirWPF-${{ matrix.configuration }}-${{ matrix.runtime }}.zip"
          if (-not (Test-Path $asset)) { throw "Asset not found: $asset" }
          gh release create "$env:TAG" "$asset" `
            --repo "$env:REPO" `
            --title "Release $env:TAG" `
            --notes "TathkīrWPF version ${{ steps.versioning.outputs.version }} built with ${{ matrix.configuration }} (self-contained, ${{ matrix.runtime }})." `
            --latest
